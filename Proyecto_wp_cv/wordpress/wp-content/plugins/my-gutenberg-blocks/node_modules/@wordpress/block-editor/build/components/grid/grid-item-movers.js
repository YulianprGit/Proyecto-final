"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridItemMovers = GridItemMovers;
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
var _data = require("@wordpress/data");
var _blockControls = _interopRequireDefault(require("../block-controls"));
var _useGetNumberOfBlocksBeforeCell = require("./use-get-number-of-blocks-before-cell");
var _store = require("../../store");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function GridItemMovers({
  layout,
  parentLayout,
  onChange,
  gridClientId,
  blockClientId
}) {
  var _layout$columnStart, _layout$rowStart, _layout$columnSpan, _layout$rowSpan;
  const {
    moveBlocksToPosition,
    __unstableMarkNextChangeAsNotPersistent
  } = (0, _data.useDispatch)(_store.store);
  const columnStart = (_layout$columnStart = layout?.columnStart) !== null && _layout$columnStart !== void 0 ? _layout$columnStart : 1;
  const rowStart = (_layout$rowStart = layout?.rowStart) !== null && _layout$rowStart !== void 0 ? _layout$rowStart : 1;
  const columnSpan = (_layout$columnSpan = layout?.columnSpan) !== null && _layout$columnSpan !== void 0 ? _layout$columnSpan : 1;
  const rowSpan = (_layout$rowSpan = layout?.rowSpan) !== null && _layout$rowSpan !== void 0 ? _layout$rowSpan : 1;
  const columnEnd = columnStart + columnSpan - 1;
  const rowEnd = rowStart + rowSpan - 1;
  const columnCount = parentLayout?.columnCount;
  const rowCount = parentLayout?.rowCount;
  const columnCountNumber = parseInt(columnCount, 10);
  const rowStartNumber = parseInt(rowStart, 10);
  const columnStartNumber = parseInt(columnStart, 10);
  const getNumberOfBlocksBeforeCell = (0, _useGetNumberOfBlocksBeforeCell.useGetNumberOfBlocksBeforeCell)(gridClientId, columnCountNumber);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_blockControls.default, {
    group: "parent",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ToolbarButton, {
      icon: _icons.arrowUp,
      label: (0, _i18n.__)('Move block up'),
      isDisabled: rowStart <= 1,
      onClick: () => {
        onChange({
          rowStart: rowStart - 1
        });
        __unstableMarkNextChangeAsNotPersistent();
        moveBlocksToPosition([blockClientId], gridClientId, gridClientId, getNumberOfBlocksBeforeCell(columnStartNumber, rowStartNumber - 1));
      }
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ToolbarButton, {
      icon: _icons.arrowDown,
      label: (0, _i18n.__)('Move block down'),
      isDisabled: rowCount && rowEnd >= rowCount,
      onClick: () => {
        onChange({
          rowStart: rowStart + 1
        });
        __unstableMarkNextChangeAsNotPersistent();
        moveBlocksToPosition([blockClientId], gridClientId, gridClientId, getNumberOfBlocksBeforeCell(columnStartNumber, rowStartNumber + 1));
      }
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ToolbarButton, {
      icon: _icons.arrowLeft,
      label: (0, _i18n.__)('Move block left'),
      isDisabled: columnStart <= 1,
      onClick: () => {
        onChange({
          columnStart: columnStartNumber - 1
        });
        __unstableMarkNextChangeAsNotPersistent();
        moveBlocksToPosition([blockClientId], gridClientId, gridClientId, getNumberOfBlocksBeforeCell(columnStartNumber - 1, rowStartNumber));
      }
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ToolbarButton, {
      icon: _icons.arrowRight,
      label: (0, _i18n.__)('Move block right'),
      isDisabled: columnCount && columnEnd >= columnCount,
      onClick: () => {
        onChange({
          columnStart: columnStartNumber + 1
        });
        __unstableMarkNextChangeAsNotPersistent();
        moveBlocksToPosition([blockClientId], gridClientId, gridClientId, getNumberOfBlocksBeforeCell(columnStartNumber + 1, rowStartNumber));
      }
    })]
  });
}
//# sourceMappingURL=grid-item-movers.js.map