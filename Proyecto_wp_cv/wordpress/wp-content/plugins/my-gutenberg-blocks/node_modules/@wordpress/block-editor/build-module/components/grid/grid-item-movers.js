/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { ToolbarButton } from '@wordpress/components';
import { arrowLeft, arrowUp, arrowDown, arrowRight } from '@wordpress/icons';
import { useDispatch } from '@wordpress/data';

/**
 * Internal dependencies
 */
import BlockControls from '../block-controls';
import { useGetNumberOfBlocksBeforeCell } from './use-get-number-of-blocks-before-cell';
import { store as blockEditorStore } from '../../store';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export function GridItemMovers({
  layout,
  parentLayout,
  onChange,
  gridClientId,
  blockClientId
}) {
  var _layout$columnStart, _layout$rowStart, _layout$columnSpan, _layout$rowSpan;
  const {
    moveBlocksToPosition,
    __unstableMarkNextChangeAsNotPersistent
  } = useDispatch(blockEditorStore);
  const columnStart = (_layout$columnStart = layout?.columnStart) !== null && _layout$columnStart !== void 0 ? _layout$columnStart : 1;
  const rowStart = (_layout$rowStart = layout?.rowStart) !== null && _layout$rowStart !== void 0 ? _layout$rowStart : 1;
  const columnSpan = (_layout$columnSpan = layout?.columnSpan) !== null && _layout$columnSpan !== void 0 ? _layout$columnSpan : 1;
  const rowSpan = (_layout$rowSpan = layout?.rowSpan) !== null && _layout$rowSpan !== void 0 ? _layout$rowSpan : 1;
  const columnEnd = columnStart + columnSpan - 1;
  const rowEnd = rowStart + rowSpan - 1;
  const columnCount = parentLayout?.columnCount;
  const rowCount = parentLayout?.rowCount;
  const columnCountNumber = parseInt(columnCount, 10);
  const rowStartNumber = parseInt(rowStart, 10);
  const columnStartNumber = parseInt(columnStart, 10);
  const getNumberOfBlocksBeforeCell = useGetNumberOfBlocksBeforeCell(gridClientId, columnCountNumber);
  return /*#__PURE__*/_jsxs(BlockControls, {
    group: "parent",
    children: [/*#__PURE__*/_jsx(ToolbarButton, {
      icon: arrowUp,
      label: __('Move block up'),
      isDisabled: rowStart <= 1,
      onClick: () => {
        onChange({
          rowStart: rowStart - 1
        });
        __unstableMarkNextChangeAsNotPersistent();
        moveBlocksToPosition([blockClientId], gridClientId, gridClientId, getNumberOfBlocksBeforeCell(columnStartNumber, rowStartNumber - 1));
      }
    }), /*#__PURE__*/_jsx(ToolbarButton, {
      icon: arrowDown,
      label: __('Move block down'),
      isDisabled: rowCount && rowEnd >= rowCount,
      onClick: () => {
        onChange({
          rowStart: rowStart + 1
        });
        __unstableMarkNextChangeAsNotPersistent();
        moveBlocksToPosition([blockClientId], gridClientId, gridClientId, getNumberOfBlocksBeforeCell(columnStartNumber, rowStartNumber + 1));
      }
    }), /*#__PURE__*/_jsx(ToolbarButton, {
      icon: arrowLeft,
      label: __('Move block left'),
      isDisabled: columnStart <= 1,
      onClick: () => {
        onChange({
          columnStart: columnStartNumber - 1
        });
        __unstableMarkNextChangeAsNotPersistent();
        moveBlocksToPosition([blockClientId], gridClientId, gridClientId, getNumberOfBlocksBeforeCell(columnStartNumber - 1, rowStartNumber));
      }
    }), /*#__PURE__*/_jsx(ToolbarButton, {
      icon: arrowRight,
      label: __('Move block right'),
      isDisabled: columnCount && columnEnd >= columnCount,
      onClick: () => {
        onChange({
          columnStart: columnStartNumber + 1
        });
        __unstableMarkNextChangeAsNotPersistent();
        moveBlocksToPosition([blockClientId], gridClientId, gridClientId, getNumberOfBlocksBeforeCell(columnStartNumber + 1, rowStartNumber));
      }
    })]
  });
}
//# sourceMappingURL=grid-item-movers.js.map